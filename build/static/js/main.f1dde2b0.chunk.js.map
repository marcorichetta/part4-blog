{"version":3,"sources":["components/NavBar.js","components/Footer.js","components/Notification.js","hooks/index.js","services/users.js","services/blogs.js","reducers/userReducer.js","reducers/notificationReducer.js","components/LoginForm.js","components/Togglable.js","reducers/blogReducer.js","components/BlogForm.js","reducers/filterReducer.js","components/BlogList.js","components/UserList.js","components/User.js","components/Blog.js","App.js","store.js","index.js"],"names":["NavBar","currentPath","window","location","pathname","useState","activePage","setActivePage","handleItemClick","e","to","Menu","pointing","secondary","Item","as","Link","name","active","onClick","Footer","Segment","inverted","connect","state","notifications","props","notificationMessage","text","notificationStyle","style","undefined","Message","positive","error","useField","type","value","setValue","onChange","event","target","reset","baseUrl","process","login","credentials","a","axios","post","response","data","getAllUsers","get","token","getAll","create","newObject","config","headers","Authorization","createComment","id","setToken","newToken","update","put","deleteBlog","delete","initialState","currentUser","userList","userReducer","action","newBlog","userId","user","newUserList","find","u","blogs","push","setNotification","time","dispatch","setTimeout","notificationReducer","mapDispatchToProps","userService","loggedUser","blogService","localStorage","setItem","JSON","stringify","logout","users","username","password","resetUsername","usernameProps","resetPassword","passwordProps","loginVisible","setloginVisible","handleLogin","preventDefault","exception","handleLogout","removeItem","hideWhenVisible","display","showWhenVisible","Button","color","Form","onSubmit","Field","inline","required","Input","data-cy","Icon","negative","margin","Togglable","visible","setVisible","toggleVisibility","buttonLabel","children","likeBlog","blog","likesObject","likes","likedBlog","removeBlog","blogReducer","blogId","blogToUpdate","b","updatedBlog","comments","map","blogToLike","blogToRemoveID","filter","createBlog","blogObject","blogTitle","blogAuthor","blogUrl","resetTitle","titleProps","resetAuthor","authorProps","resetUrl","urlProps","addBlog","title","author","url","notificationMsg","size","label","width","filterReducer","blogsToShow","Array","from","sort","filterChange","visibleBlogs","Header","dividing","Radio","checked","Group","divided","key","Table","compact","Row","HeaderCell","Body","Cell","length","ownProps","userData","Loader","userBlogs","userInfo","Card","header","meta","extra","List","animated","celled","addComment","newComment","Blog","withRouter","comment","resetComment","commentProps","blogData","commentHandler","Content","Meta","Divider","content","labelPosition","icon","basic","likeHandler","confirm","history","removeHandler","c","placeholder","initializeBlogs","relogin","useEffect","loggedUserJSON","getItem","parse","Container","marginTop","textAlign","href","exact","path","render","match","params","UserList","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f1dde2b0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Menu } from 'semantic-ui-react'\n\nconst NavBar = () => {\n\n    const currentPath = window.location.pathname\n    const [activePage, setActivePage] = useState(currentPath)\n\n    // currentPath on home === '/' so using\n    // 'to' parameter from the item accomplishes the task\n    const handleItemClick = (e, { to }) => setActivePage(to)\n\n    return (\n        <Menu pointing secondary>\n            <Menu.Item\n                as={Link}\n                to=\"/\"\n                name='home'\n                active={activePage === '/'}\n                onClick={handleItemClick}\n            >\n            </Menu.Item>\n            <Menu.Item\n                as={Link}\n                to=\"/users\"\n                name='/users'\n                active={activePage === '/users'}\n                onClick={handleItemClick}\n            >\n            </Menu.Item>\n        </Menu>\n    )\n}\n\nexport default NavBar","import React from 'react'\nimport { Segment } from 'semantic-ui-react'\n\nconst Footer = () => {\n    return (\n        <Segment inverted>\n            Part 5 - Blog App\n        </Segment>\n    )\n}\n\nexport default Footer","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Message } from 'semantic-ui-react'\n\nconst Notification = (props) => {\n\n    const notificationMessage = props.notifications.text\n    const notificationStyle = props.notifications.style\n\n    if (notificationMessage === undefined) {\n        return null\n    }\n\n    return (\n        <>\n            {notificationStyle === 'positive'\n                ?\n                <Message positive>\n                    {notificationMessage}\n                </Message>\n                :\n                <Message error>\n                    {notificationMessage}\n                </Message>\n            }\n\n        </>\n    )\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        notifications: state.notifications\n    }\n}\n\nexport default connect(\n    mapStateToProps\n)(Notification)","import { useState } from 'react'\n\n/**\n * Custom hook to handle the input props\n * @param {string} type The type value\n */\nexport const useField = (type) => {\n    const [value, setValue] = useState('')\n\n    const onChange = (event) => {\n        setValue(event.target.value)\n    }\n\n    /**\n     * Uses `setValue` hook to reset the state\n     */\n    const reset = () => {\n        setValue('')\n    }\n\n    return {\n        type,\n        value,\n        onChange,\n        reset\n    }\n}","import axios from 'axios'\n\n// This env variable is defined in the webpack config\nconst baseUrl = `${process.env.REACT_APP_BACKEND_URL}/api/`;\n\nconst login = async credentials => {\n    const response = await axios.post(baseUrl + 'login', credentials)\n    return response.data\n}\n\nconst getAllUsers = async () => {\n    const response = await axios.get(baseUrl + 'users')\n    return response.data\n}\n\nexport default { login, getAllUsers }","import axios from 'axios'\n\nconst baseUrl = `${process.env.REACT_APP_BACKEND_URL}/api/blogs`;\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n    const response = await axios.get(baseUrl)\n    return response.data\n}\n\nconst create = async newObject => {\n    const config = {\n        headers: { Authorization: token },\n    }\n\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n}\n\nconst createComment = async newObject => {\n\n    const response = await axios.post(`${baseUrl}/${newObject.id}`, newObject)\n    return response.data\n}\n\n// In this case we send only the id and number of likes, not the entire blog post\nconst update = async (id, newObject) => {\n\n    /* This gives flexibility to craft the object on the\n        component itself, with the fields to be updated  */\n    const response = await axios.put(`${baseUrl}/${id}`, newObject)\n    return response.data\n}\n\nconst deleteBlog = async (id) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n\n    const response = await axios.delete(`${baseUrl}/${id}`, config)\n    return response.data\n}\n\nexport default {\n    setToken,\n    getAll,\n    create,\n    update,\n    deleteBlog,\n    createComment\n}","import userService from '../services/users'\nimport blogService from '../services/blogs'\n\nconst initialState = {\n    currentUser: undefined,\n    userList: []\n}\n\nconst userReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n    case 'LOGIN':\n\n        return {\n            ...state,\n            currentUser: action.data\n        }\n    case 'LOGOUT':\n        return ''\n    case 'GET_USERS':\n\n        return {\n            ...state,\n            userList: action.data\n        }\n    case 'NEW_BLOG': {\n        // Update the user's blogs array\n\n        // Get the newly created blog\n        let newBlog = action.data\n\n        // Get the userId who created the blog\n        let userId = action.data.user\n\n        // Clone the userList with his nested props\n        let newUserList = [...state.userList]\n\n        /**\n             * Find the user who created the blog in the list\n             * Then PUSH the new blog into the `blogs` array\n             * This MODIFIES the newUserList\n             */\n        newUserList\n            .find(u => u.id === userId)\n            .blogs.push(newBlog)\n\n        return {\n            ...state,\n            userList: newUserList\n        }\n\n    }\n    default:\n        return state\n    }\n}\n\n/**\n * Log the user through the userService (Backend)\n * Then dispatch an action to update the global state\n * with the current user logged in\n * @param credentials username & password\n */\nexport const login = credentials => {\n    return async dispatch => {\n\n        // Send login request and save user information on `user`\n        const loggedUser = await userService.login(credentials)\n\n        // Set token to be able to create new blog posts\n        blogService.setToken(loggedUser.token)\n\n        // If login is successful\n        // Save user data into localstorage\n        window.localStorage.setItem(\n            'loggedBlogAppUser', JSON.stringify(loggedUser)\n        )\n\n\n        dispatch({\n            type: 'LOGIN',\n            data: loggedUser\n        })\n    }\n}\n\n/**\n * As the user is already logged in, only\n * dispatch an action to update the global state\n * with the current user data\n * @param credentials username, name & token\n */\nexport const relogin = credentials => {\n\n    // Set token to be able to create new blog posts\n    blogService.setToken(credentials.token)\n\n    return {\n        type: 'LOGIN',\n        data: credentials\n    }\n}\n\nexport const logout = () => {\n    return {\n        type: 'LOGOUT'\n    }\n}\n\nexport const getAllUsers = () => {\n    return async dispatch => {\n\n        const users = await userService.getAllUsers()\n\n        // Then dispatches the blogs to the action, which adds them to the store.\n        dispatch({\n            type: 'GET_USERS',\n            data: users\n        })\n    }\n}\n\nexport default userReducer","const notificationReducer = (state = {}, action) => {\n    switch (action.type) {\n    case 'CREATE_NOTIFICATION':\n        // Send the text and style data to Notification component\n        return action.data\n    case 'REMOVE_NOTIFICATION':\n        return ''\n    default:\n        return state\n    }\n}\n\n/* ACTION CREATORS */\nconst createNotification = ({ text, style }) => {\n    return {\n        type: 'CREATE_NOTIFICATION',\n        data: {\n            text,\n            style\n        }\n    }\n}\nconst removeNotification = () => {\n    return {\n        type: 'REMOVE_NOTIFICATION'\n    }\n}\n\n// https://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559\n/**\n *\n * @param {string} text The notification message\n * @param {int} time The number of seconds to be shown\n * @param {string} style success or error\n */\nexport const setNotification = (text, style, time) => {\n    return async dispatch => {\n        await dispatch(createNotification({ text, style }))\n\n        setTimeout(() => {\n            dispatch(removeNotification())\n        }, time * 1000)\n    }\n}\n\nexport default notificationReducer","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\n/* HOOKS */\nimport { useField } from '../hooks/index'\n\nimport { login, logout } from '../reducers/userReducer'\nimport { setNotification } from '../reducers/notificationReducer'\nimport { Button, Form, Input, Icon } from 'semantic-ui-react'\n\nconst LoginForm = (props) => {\n\n    // Custom hooks\n    const username = useField('text')\n    const password = useField('password')\n\n\n    /**\n     *  Toma el valor de `reset` dentro de`username` y lo guarda en`resetTitle`\n     *  Las demas propiedades de`username` son pasadas a`usernameProps`\n     **/\n    const { reset: resetUsername, ...usernameProps } = username\n    const { reset: resetPassword, ...passwordProps } = password\n\n    // State hooks\n    const [loginVisible, setloginVisible] = useState(false)\n\n\n    // Log every user\n    const handleLogin = async (event) => {\n        event.preventDefault()\n\n        try {\n\n            // Define credentials\n            const credentials = {\n                username: event.target.username.value,\n                password: event.target.password.value\n            }\n\n            // This shoots the login function in userReducer,\n            // which updates the state \"or not\"\n            props.login(credentials)\n\n        } catch (exception) {\n            // If not, show an error\n            props.setNotification('Wrong credentials. Try again.', 'negative', 5)\n        }\n\n        // Set the token to be sent in each blog creation (POST)\n        //blogService.setToken(loggedUser.token)\n\n        // Empty the form fields using custom hook\n        resetUsername()\n        resetPassword()\n    }\n\n\n    /**\n     * Erase localstorage, reset state variables, hide loginForm\n     * and call the logout function from userReducer\n     */\n    const handleLogout = async () => {\n        window.localStorage.removeItem('loggedBlogAppUser')\n\n        resetUsername()\n        resetPassword()\n        setloginVisible(false)\n\n        props.logout()\n    }\n\n    // Change HTML display property\n    const hideWhenVisible = { display: loginVisible ? 'none' : '' }\n    const showWhenVisible = { display: loginVisible ? '' : 'none' }\n\n    return (\n        <div>\n            {/* If user not logged, show loginForm */}\n            {props.currentUser === undefined ?\n                <>\n                    {/* Show the login form */}\n                    <div style={hideWhenVisible} >\n                        <Button onClick={() => setloginVisible(true)} color='green'>Log In</Button>\n                    </div>\n\n                    <div style={showWhenVisible}>\n                        <h2>Login</h2>\n                        <Form onSubmit={handleLogin}>\n                            <Form.Field inline required>\n                                <label>Username</label>\n                                <Input \n                                    name=\"username\"\n                                    {...usernameProps}\n                                    data-cy=\"username\"\n                                />\n                            </Form.Field>\n                            <Form.Field inline required>\n                                <label>Password</label>\n                                <Input\n                                    name=\"password\"\n                                    {...passwordProps}\n                                    data-cy=\"password\"\n                                />\n                            </Form.Field>\n                            {/* Hide the login form */}\n                            <Button positive type=\"submit\" data-cy=\"submit\">Submit</Button>\n                            <Button type=\"button\" onClick={() => setloginVisible(false)} >Cancel</Button>\n                        </Form>\n                    </div>\n                </>\n                : <p>\n                    <Icon name=\"user circle\" />\n                    <b>{props.currentUser.name}</b> logged in\n                    <Button\n                        negative\n                        style={{ margin: '10px' }}\n                        onClick={handleLogout}>Log out\n                    </Button>\n                </p>\n            }\n        </div>\n    )\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        currentUser: state.users.currentUser\n    }\n}\n\n\nconst mapDispatchToProps = {\n    login,\n    logout,\n    setNotification\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoginForm)","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from 'semantic-ui-react'\n\nconst Togglable = (props) => {\n    const [visible, setVisible] = useState(false)\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' }\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n\n    return (\n        <>\n            <div style={hideWhenVisible}>\n                <Button positive onClick={toggleVisibility} data-cy='new-blog'>\n                    {props.buttonLabel}\n                </Button>\n            </div>\n            <div style={showWhenVisible}>\n                {/* props.children is used for referencing the\n                    child components of the Togglable component. */}\n                {props.children}\n                <br />\n                <Button onClick={toggleVisibility}>Cancel</Button>\n            </div>\n        </>\n    )\n}\n\nTogglable.propTypes = {\n    buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable","import blogService from '../services/blogs'\n\nconst blogReducer = (state = [], action) => {\n\n    switch(action.type) {\n    case 'INIT_BLOGS':\n        return action.data\n    case 'NEW_BLOG':\n        // Return an array with the state plus the action\n        return [...state, action.data]\n    case 'NEW_COMMENT': {\n\n        const blogId = action.data.id\n\n        // Modify the comments from the blog\n        const blogToUpdate = state.find(b => b.id === blogId)\n\n        // Update the comments\n        const updatedBlog = {\n            ...blogToUpdate,\n            comments: action.data.comments\n        }\n\n        /* Return the state with all the\n            blogs that didn't change and the one\n            with the comments added */\n        return state.map(blog =>\n            blog.id !== blogId ? blog : updatedBlog)\n    }\n    case 'LIKE': {\n        // Extract blog id\n        const id = action.data.id\n\n        // Find blog to change\n        const blogToLike = state.find(b => b.id === id)\n\n        // Create a copy of blogToLike and add 1 like\n        const likedBlog = {\n            ...blogToLike,\n            likes: blogToLike.likes + 1\n        }\n\n        /* Return the state with all the\n            blogs that didn't change and the liked one */\n        return state.map(blog =>\n            blog.id !== id ? blog : likedBlog\n        )\n    }\n    case 'REMOVE': {\n        /* Actualiza los posts a renderizar\n              excluyendo al que coincide con el\n              id recientemente eliminado. */\n\n        // Extract blog id\n        const blogToRemoveID = action.data.id\n\n        // Return the blogs without the removed one\n        return state.filter(b => b.id !== blogToRemoveID)\n    }\n    default:\n        return state\n    }\n}\n\n/* ACTION CREATORS */\n\nexport const initializeBlogs = () => {\n    return async dispatch => {\n\n        // The operation first fetches all the blogs from the server\n        const blogs = await blogService.getAll()\n\n        // Then dispatches the blogs to the action, which adds them to the store.\n        dispatch({\n            type: 'INIT_BLOGS',\n            data: blogs\n        })\n    }\n}\n\nexport const createBlog = blogObject => {\n    return async dispatch => {\n        const newBlog = await blogService.create(blogObject)\n        dispatch({\n            type: 'NEW_BLOG',\n            data: newBlog\n        })\n    }\n}\n\nexport const addComment =  (newComment, blog) => {\n    return async dispatch => {\n\n        const newObject = {\n            id: blog.id,\n            newComment: newComment,\n            comments: blog.comments\n        }\n\n        const updatedBlog = await blogService.createComment(newObject)\n        dispatch({\n            type: 'NEW_COMMENT',\n            data: updatedBlog\n        })\n    }\n}\n\nexport const likeBlog = blog => {\n    return async dispatch => {\n\n        // Create an object with the property to be changed\n        const likesObject = {\n            likes: blog.likes + 1\n        }\n\n        // Send the PUT request with blog likes + 1 added\n        const likedBlog = await blogService.update(blog.id, likesObject)\n        dispatch({\n            type: 'LIKE',\n            data: likedBlog\n        })\n    }\n}\n\nexport const removeBlog = blog => {\n    return async dispatch => {\n\n        // Utiliza el blogService para enviar una DELETE request\n        await blogService.deleteBlog(blog.id)\n\n        dispatch({\n            type: 'REMOVE',\n            data: blog\n        })\n\n    }\n}\n\nexport default blogReducer","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { createBlog } from '../reducers/blogReducer'\nimport { setNotification } from '../reducers/notificationReducer'\n\nimport { useField } from '../hooks/index'\nimport { Form, Button } from 'semantic-ui-react'\n\nconst BlogForm = (props) => {\n\n    const blogTitle = useField('text')\n    const blogAuthor = useField('text')\n    const blogUrl = useField('text')\n\n    /**\n     * Toma el valor de `reset` dentro de `title` y lo guarda en `resetTitle`\n     * Las demas propiedades de `title` son pasadas a `titleProps`\n     * */\n    const { reset: resetTitle, ...titleProps } = blogTitle\n    const { reset: resetAuthor, ...authorProps } = blogAuthor\n    const { reset: resetUrl, ...urlProps } = blogUrl\n\n    const addBlog = async (event) => {\n        // Prevent page reloading\n        event.preventDefault()\n\n        // Create new blog object\n        const blogObject = {\n            title: blogTitle.value,\n            author: blogAuthor.value,\n            url: blogUrl.value,\n            user: props.currentUser.id\n        }\n\n        props.createBlog(blogObject)\n\n        let notificationMsg = `A new blog \"${blogObject.title}\" was created`\n\n        props.setNotification(\n            notificationMsg,\n            'positive',\n            5\n        )\n\n        /* setBlogs(blogs.concat(createdBlog)) */\n\n        // Use custom hook functionality to reset state\n        resetTitle()\n        resetAuthor()\n        resetUrl()\n    }\n\n\n    return (\n        <>\n        <h4>Create a new blog post</h4>\n            <Form onSubmit={addBlog} size=\"small\" >\n                <Form.Input\n                    label=\"Title\"\n                    name=\"title\"\n                    width={4}\n                    {...titleProps}\n                    data-cy='title-input'\n                />\n                <Form.Input\n                    label=\"Author\"\n                    name=\"author\"\n                    width={4}\n                    {...authorProps}\n                    data-cy='author-input'\n                />\n                <Form.Input\n                    label=\"URL\"\n                    name=\"url\"\n                    width={4}\n                    {...urlProps}\n                    data-cy='url-input'\n                />\n                <Button positive type=\"submit\" data-cy='blog-submit'>Create</Button>\n            </Form>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        currentUser: state.users.currentUser\n    }\n}\n\nconst mapDispatchToProps = {\n    createBlog,\n    setNotification\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BlogForm)","const filterReducer = (state = 'CREATED', action) => {\n    switch (action.type) {\n    case 'SET_FILTER':\n        return action.filter\n    default:\n        return state\n    }\n\n}\n\n/**\n * Action creator\n * @param {string} filter Filter to be set\n */\nexport const filterChange = filter => {\n    return {\n        type: 'SET_FILTER',\n        filter\n    }\n}\n\nexport default filterReducer","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { likeBlog } from '../reducers/blogReducer'\nimport { removeBlog } from '../reducers/blogReducer'\nimport { filterChange } from '../reducers/filterReducer'\nimport { Header, Form, Item } from 'semantic-ui-react'\n\nconst BlogList = (props) => {\n\n    return (\n        <>\n                <Header as=\"h4\" dividing>\n                    Order by\n                </Header>\n                <Form>\n                    <Form.Radio\n                        label=\"Creation Order\"\n                        checked={props.filter === 'CREATED'}\n                        name=\"filter\"\n                        onChange={() => props.filterChange('CREATED')}\n                    />\n                    <Form.Radio\n                        label=\"Most liked\"\n                        name=\"filter\"\n                        checked={props.filter === 'LIKES'}\n                        onChange={() => props.filterChange('LIKES')}\n                    />\n                </Form>\n\n            {/* Generate a new Blog element for each blog */}\n            <Item.Group divided>\n                {props.visibleBlogs.map(blog =>\n                    <Item key={blog.id} id={'blog'} as={Link} to={`/blogs/${blog.id}`}>\n                        <Item.Header>{blog.title}</Item.Header>\n                    </Item>\n                )}\n            </Item.Group>\n\n        </>\n    )\n}\n\n/**\n * Si `filter` === `LIKES`, `blogsToShow` contendrá los blogs por cantidad de likes.\n * Si no contendrá los blogs ordenados normalmente.\n */\nconst blogsToShow = ({ blogs, filter }) => {\n\n    if (filter === 'LIKES') {\n        // Do not mutate data\n        // Create a new array with the current blogs\n        let blogsToSort = Array.from(blogs)\n\n        return blogsToSort.sort((a, b) => b.likes - a.likes)\n    }\n\n    // Return in creation order (Original)\n    return blogs\n}\n\n/**\n * The function can be used for defining the props of the\n * connected component that are based on the state of the Redux store.\n * @param state\n */\nconst mapStateToProps = (state) => {\n    return {\n        visibleBlogs: blogsToShow(state),\n        filter: state.filter,\n        currentUser: state.users.currentUser,\n        notifications: state.notifications\n    }\n}\n\n/**\n * Group of action creator functions passed to the connected component as props\n */\nconst mapDispatchToProps = {\n    likeBlog,\n    removeBlog,\n    filterChange\n}\n\n// we can export directly the component returned by connect\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(BlogList)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Header, Table } from 'semantic-ui-react'\n\nconst userList = (props) => {\n\n    /* When navigating directly to /users/, the React application\n    has not yet received the data from the backend.  */\n    if (props.users === undefined) {\n        return null\n    }\n\n    return (\n        <>\n                <Header as=\"h2\">Users</Header>\n\n                <Table compact>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Username</Table.HeaderCell>\n                            <Table.HeaderCell>N° of blogs created</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {/* Generate a new row for each user */}\n                        {props.users.map(user =>\n                            <Table.Row key={user.id}>\n                                <Table.Cell>\n                                    <Link to={`/users/${user.id}`}>{user.username}</Link>\n                                </Table.Cell>\n                                <Table.Cell>{user.blogs.length}</Table.Cell>\n                            </Table.Row>\n                        )}\n                    </Table.Body>\n                </Table>\n        </>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users.userList\n    }\n}\n\nexport default connect(\n    mapStateToProps\n)(userList)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Card, List, Header, Loader } from 'semantic-ui-react'\n\nconst User = (props) => {\n\n    if (props.userData === undefined) {\n        return <Loader active inline='centered' />\n    }\n\n    // Nested destructuring\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Nested_object_and_array_destructuring\n\n    // blogs refer to the object received from props and is assigned to userBlogs\n    // The rest of the fields from props are assigned to userInfo\n    const { blogs: userBlogs, ...userInfo } = props.userData\n\n\n    return (\n        <>\n            <Card\n                header={`Name: ${userInfo.name}`}\n                meta={`Username: ${userInfo.username}`}\n                extra={`N° of blogs: ${userBlogs.length}`}\n            />\n\n            <Header as=\"h3\">Added blogs</Header>\n            <List animated celled>\n                {userBlogs.map(blog =>\n                    <List.Item key={blog.id}>\n                        <li>{blog.title}</li>\n                    </List.Item>\n                )}\n\n            </List>\n        </>\n    )\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\n    // Use the prop passed in the rendering of the component\n    // <User id={'someId'} => ownProps.id == 'someId'\n    const userId = ownProps.id\n\n    // Get userList from current state\n    const users = state.users.userList\n\n    // Filter current user data\n    const userData = users.find(u => u.id === userId)\n\n    return { userData }\n\n}\n\n\n\nexport default connect(\n    mapStateToProps\n)(User)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\n/* HOOKS */\nimport { useField } from '../hooks/index'\n\nimport {\n    likeBlog,\n    removeBlog,\n    addComment\n} from '../reducers/blogReducer'\n\nimport { setNotification } from '../reducers/notificationReducer'\nimport { Card, Icon, Button, Divider, Header, Form, List } from 'semantic-ui-react'\n\nconst BlogNoHistory = (props) => {\n\n    // Custom hook\n    const comment = useField('text')\n\n    const { reset: resetComment, ...commentProps } = comment\n\n    if (props.blogData === undefined) {\n        return null\n    }\n\n    let blog = props.blogData\n\n    const commentHandler = async (event) => {\n        event.preventDefault()\n\n        try {\n            // Get new comment\n            let newComment = event.target.comment.value\n\n            // Send comment\n            props.addComment(newComment, blog)\n\n        } catch (exception) {\n            // If not, show an error\n            props.setNotification('Wrong credentials. Try again.', 'negative', 5)\n        }\n\n        // Clean input using custom hook\n        resetComment()\n    }\n\n    const likeHandler = (blog) => {\n\n        props.likeBlog(blog)\n\n        let notificationMsg = `The blog ${blog.title} was liked`\n        props.setNotification(notificationMsg, 'positive', 5)\n    }\n\n    const removeHandler = (blog) => {\n\n        if (window.confirm(`Remove ${blog.title} by ${blog.author}?`)) {\n            // Call the blogReducer method\n            props.removeBlog(blog)\n\n            // Go home (withRouter functionality)\n            props.history.push('/')\n\n            // Set notification\n            let notificationMsg = `The blog ${blog.title} was deleted`\n            props.setNotification(notificationMsg, 'negative', 5)\n        }\n\n        return 0\n    }\n\n    return (\n        <>\n            <Card>\n                <Card.Content>\n                    <Card.Header>{blog.title}</Card.Header>\n                    <Card.Meta>Added by {blog.author}</Card.Meta>\n                    {blog.url === ''\n                        ? 'No url provided'\n                        : <Card.Content extra>\n                            <Icon name='linkify' /> {blog.url}\n                        </Card.Content>\n                    }\n                    <Divider />\n                    <Card.Content extra>\n                        <Button\n                            content=\"Like\"\n                            labelPosition='right'\n                            icon=\"heart\"\n                            label={{ as: 'a', basic: true, content: blog.likes }}\n                            onClick={() => likeHandler(blog)}\n                        >\n                        </Button>\n                        <Button\n                            basic\n                            color='red'\n                            icon='trash'\n                            onClick={() => removeHandler(blog)}\n                        />\n                    </Card.Content>\n                </Card.Content>\n            </Card>\n            <Divider />\n            <>\n                <Header as=\"h4\">Comments</Header>\n                {blog.comments.length === 0\n                    ? 'This blog has no comments yet'\n                    :\n                    <List divided animated >\n                        {blog.comments.map(c =>\n                            <List.Item key={c}>\n                                {c}\n                            </List.Item>\n                        )}\n                    </List>\n                }\n                <Form onSubmit={commentHandler}>\n                    <Form.Input\n                        name=\"comment\"\n                        width={4}\n                        placeholder=\"Great post!\"\n                        {...commentProps}\n                        data-cy=\"comment-input\"\n                    />\n                    <Button type=\"submit\">Add comment</Button>\n                </Form>\n            </>\n        </>\n    )\n}\n\n/**\n * The function can be used for defining the props of the\n * connected component that are based on the state of the Redux store.\n * @param state\n */\nconst mapStateToProps = (state, ownProps) => {\n\n    const blogId = ownProps.id\n\n    const blogData = state.blogs.find(b => b.id === blogId)\n\n    return { blogData }\n}\n\n/**\n * Group of action creator functions passed to the connected component as props\n */\nconst mapDispatchToProps = {\n    likeBlog,\n    removeBlog,\n    addComment,\n    setNotification\n}\n\nconst Blog = withRouter(BlogNoHistory)\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Blog)","import React, { useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Route,\n} from 'react-router-dom'\nimport { connect } from 'react-redux'\n\n/* COMPONENTS */\nimport NavBar from './components/NavBar'\nimport Footer from './components/Footer'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport Togglable from './components/Togglable'\nimport BlogForm from './components/BlogForm'\nimport BlogList from './components/BlogList'\n\n/* REDUCERS */\nimport { initializeBlogs } from './reducers/blogReducer'\nimport { relogin, getAllUsers } from './reducers/userReducer'\nimport UserList from './components/UserList'\nimport User from './components/User'\nimport Blog from './components/Blog'\nimport { Container, Header } from 'semantic-ui-react'\n\nconst App = (props) => {\n\n    useEffect(() => {\n        props.initializeBlogs()\n        props.getAllUsers()\n    })\n\n    // Everytime the app renders, check localStorage for the user credentials\n    useEffect(() => {\n        const loggedUserJSON = window.localStorage.getItem('loggedBlogAppUser')\n        if (loggedUserJSON) {\n            const user = JSON.parse(loggedUserJSON)\n\n            // Re-login the user and set the token to be able to create new blog posts\n            props.relogin(user)\n        }\n    })\n\n    let h1Margin = {\n        marginTop: '2em'\n    }\n\n    return (\n        <Container>\n            <div>\n                <Header as=\"h1\" style={h1Margin} textAlign=\"center\">\n                    Blogs App - <a href=\"https://fullstackopen.com/en/\">\n                        Fullstack Open Course\n                    </a>\n                </Header>\n                <Router>\n                    <Notification />\n                    <NavBar />\n                    <LoginForm />\n                    <Route exact path=\"/\" render={() =>\n                <>\n                <Header as=\"h2\">Blogs</Header>\n                    {/* Add visibility functionality to the Blog Form */}\n                    <Togglable buttonLabel='New blog post'>\n                        <BlogForm />\n                        {/* If a component is defined with an automatically closing /> tag,\n                        props.children will be an empty array */}\n                    </Togglable>\n                    <BlogList />\n                </>\n\n                    }/>\n\n                    <Route path=\"/blogs/:id\" render={({ match }) =>\n                        <Blog id={match.params.id} />\n                    }/>\n                    <Route path=\"/users\" render={() => <UserList />} />\n                    <Route exact path=\"/users/:id\" render={({ match }) =>\n                        <User id={match.params.id} />\n                    }/>\n                </Router>\n                <br />\n                <Footer />\n            </div>\n        </Container>\n    )\n}\n\nconst mapDispatchToProps = {\n    initializeBlogs,\n    relogin,\n    getAllUsers\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(App)\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport blogReducer from './reducers/blogReducer'\nimport notificationReducer from './reducers/notificationReducer'\nimport filterReducer from './reducers/filterReducer'\nimport userReducer from './reducers/userReducer'\n\nconst reducer = combineReducers({\n    blogs: blogReducer,\n    notifications: notificationReducer,\n    filter: filterReducer,\n    users: userReducer\n})\n\nconst store = createStore(\n    reducer,\n    composeWithDevTools(\n        applyMiddleware(thunk)\n    )\n)\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport store from './store'\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}